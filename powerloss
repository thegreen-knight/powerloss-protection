#!/usr/bin/python3

# -----------------------------------------------------------------------------
# Copyright (c) 2025 Josh Light
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# GitHub: https://github.com/thegreen-knight
# Support: https://buymeacoffee.com/gr33nknight
# -----------------------------------------------------------------------------

import subprocess
import time
import os
import sys

SHUTDOWN_TIMEOUT = 60

def get_monitor_state():
    graphicVersion = subprocess.check_output(['echo', '$XDG_SESSION_TYPE'], encoding='utf-8')

    if graphicVersion == 'x11':
        try:
            output = subprocess.check_output(['xset', '-q'], encoding='utf-8')
            for line in output.splitlines():
                if 'Monitor is' in line:
                    state = line.strip().split('Monitor is')[-1].strip()
                    return state  # "On" or "Off"
        except subprocess.CalledProcessError:
            print("Error calling xset")
        return None
    else:
        output = subprocess.check_output(['swaymsg'], encoding='utf-8')

        ## Needs work I do not have wayland running yet.
        return "On"

def shutdown():
    # print("Shutting down...")
    # This requires root permissions
    os.system('sudo systemctl poweroff')

def main():
    off_since = None

    while True:
        state = get_monitor_state()
       # print(f"Monitor state: {state}")

        if state == 'Off':
            if off_since is None:
                off_since = time.time()
            elif time.time() - off_since >= SHUTDOWN_TIMEOUT:
                shutdown()
                sys.exit(0)
        else:
            off_since = None  # Reset timer when monitor is back on

        time.sleep(10)

if __name__ == "__main__":
    main()
